services:  # 複数のサービス（コンテナ）を定義するセクション
  app:  # PHPアプリケーションを実行するサービス
    container_name: app  # コンテナ名を "app" に指定
    build: ./docker/php  # ./docker/php ディレクトリにある Dockerfile を使ってイメージをビルド
    volumes:  # ホストとコンテナ間で共有するフォルダを指定
      - .:/var/www  # ホストの現在のディレクトリをコンテナ内の /var/www にマウント

  nginx:  # Nginx（Webサーバー）を実行するサービス
    image: nginx  # DockerHub から公式の Nginx イメージを利用
    platform: linux/amd64  # Rosetta 2経由でx86_64イメージを実行
    container_name: nginx  # コンテナ名を "nginx" に指定
    ports:  # ポートのマッピングを設定
      - 8000:80  # ホストの8000番ポートをコンテナの80番ポートにマッピング
    volumes:  # ホストとコンテナ間で共有するフォルダを指定
      - .:/var/www  # ホストの現在のディレクトリをコンテナ内の /var/www にマウント
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf  # Nginx の設定ファイルをコンテナ内にマウント
    working_dir: /var/www  # コンテナ内での作業ディレクトリを /var/www に設定
    depends_on:  # このサービスが依存する他のサービスを指定
      - app  # "app" サービスが起動した後にこのサービスを起動

  db:  # データベース（MySQL）を実行するサービス
    image: mysql:5.7  # DockerHub から MySQL 5.7 のイメージを利用
    platform: linux/amd64  # MySQL もARM64で問題がある可能性があるため
    container_name: db  # コンテナ名を "db" に指定
    environment:  # 環境変数を指定（MySQLの初期設定用）
      MYSQL_ROOT_PASSWORD: root  # MySQL の root ユーザーのパスワード
      MYSQL_DATABASE: database  # 作成するデータベース名
      MYSQL_USER: db-user  # 作成するデータベースユーザー
      MYSQL_PASSWORD: db-pass  # データベースユーザーのパスワード
      TZ: 'Asia/Tokyo'  # タイムゾーンを日本時間に設定
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci  
      # MySQLの起動時に文字セットと照合順序を指定
    volumes:  # ホストとコンテナ間で共有するフォルダを指定
      - ./docker/db/data:/var/lib/mysql  # データベースのデータをホストに永続化
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf  # MySQL の設定ファイルをコンテナ内にマウント
      - ./docker/db/sql:/docker-entrypoint-initdb.d  # 初期化用SQLファイルを配置
    ports:  # ポートのマッピングを設定
      - 3306:3306  # ホストの3306番ポートをコンテナの3306番ポートにマッピング